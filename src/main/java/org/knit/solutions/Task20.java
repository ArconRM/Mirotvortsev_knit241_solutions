package org.knit.solutions;

import org.knit.TaskDescription;
import org.knit.solutions.task20.PasswordManager.config.AppConfig;
import org.knit.solutions.task20.PasswordManager.model.PasswordEntry;
import org.knit.solutions.task20.PasswordManager.security.MasterPasswordService;
import org.knit.solutions.task20.PasswordManager.service.PasswordService;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Scanner;

/*
### –ó–∞–¥–∞—á–∞ 20

- –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ **Spring Context**,
- **AES-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ** –ø–∞—Ä–æ–ª–µ–π —Å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª–µ–º (`char[]`),
- –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è **–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞** (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å),
- –≤–æ–∑–º–æ–∂–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ **JavaFX UI**.

---

## üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞: Password Manager —Å Spring –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º

### üéØ –¶–µ–ª—å —Ä–∞–±–æ—Ç—ã:
–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º **Spring Framework** –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å–æ —Å–ª–æ–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π —Å –¥–∞–Ω–Ω—ã–º–∏.

---

### üìå –ó–∞–¥–∞–Ω–∏–µ:

–†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ **Password Manager**, –∫–æ—Ç–æ—Ä–æ–µ:
- –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥–∏–Ω—ã –∏ –ø–∞—Ä–æ–ª–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∞–π—Ç–æ–≤,
- –∏—Å–ø–æ–ª—å–∑—É–µ—Ç **Spring Context** –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏,
- **—à–∏—Ñ—Ä—É–µ—Ç –ø–∞—Ä–æ–ª–∏ —Å –ø–æ–º–æ—â—å—é –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è**,
- –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ, –∞ –∫–æ–ø–∏—Ä—É–µ—Ç –µ–≥–æ –≤ **–±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ**,
- –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å **—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª** (`JSON`, `XML` –∏–ª–∏ `Serialized`) –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏.
- (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ) –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å JavaFX.

---

## ‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

### ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:

1. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å.
2. –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç **–º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å** (–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ).
3. –í—Å–µ –ø–∞—Ä–æ–ª–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ **AES** –∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è.
4. –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫–æ–º–∞–Ω–¥—ã:
   - `add` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å (—Å–∞–π—Ç, –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å),
   - `list` ‚Äî –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –∏ –ª–æ–≥–∏–Ω–æ–≤ (–±–µ–∑ –ø–∞—Ä–æ–ª–µ–π),
   - `copy <site>` ‚Äî —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å –∏ **—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞**,
   - `delete <site>` ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–∞–π—Ç–∞,
   - `exit` ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É.

---

### üß± –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:

- **model/PasswordEntry.java** ‚Äî –∫–ª–∞—Å—Å —Å –ø–æ–ª—è–º–∏: `site`, `login`, `encryptedPassword`.
- **repository/PasswordRepository** ‚Äî –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å + `InMemoryPasswordRepository` (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç `HashMap`).
- **service/PasswordService** ‚Äî –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ.
- **crypto/EncryptionService** ‚Äî –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å + `AesEncryptionService`.
- **security/MasterPasswordHolder** ‚Äî —Ö—Ä–∞–Ω–∏—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –≤ `char[]`.
- **clipboard/ClipboardService** ‚Äî –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å + `SystemClipboardService` (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä).
- **config/AppConfig.java** ‚Äî –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Spring Context.
- **App.java** ‚Äî —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞, CLI-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫.

---

### üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:

- –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ `char[]` –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å **–æ–±–Ω—É–ª—ë–Ω –≤—Ä—É—á–Ω—É—é** (–≤ `shutdown hook`).
- –ü–∞—Ä–æ–ª–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ.
- –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ `AES/CBC/PKCS5Padding`, –∫–ª—é—á –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ `PBKDF2WithHmacSHA256`.

---

### üß† –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):

- –î–æ–±–∞–≤–∏—Ç—å **–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å JavaFX**, –≤ –∫–æ—Ç–æ—Ä–æ–º:
   - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏;
   - —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–æ–≥–∏–Ω—ã –∏ —Å–∞–π—Ç—ã;
   - –∫–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å" –∫–æ–ø–∏—Ä—É–µ—Ç –µ–≥–æ –≤ –±—É—Ñ–µ—Ä (–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç);
   - –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.

---

## üîß –ü–æ–¥—Å–∫–∞–∑–∫–∏

### üì• –ß—Ç–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è:

```java
System.out.print("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å: ");
char[] masterPassword = System.console() != null
        ? System.console().readPassword()
        : scanner.nextLine().toCharArray();
```

---

### üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä:

```java
Toolkit.getDefaultToolkit()
       .getSystemClipboard()
       .setContents(new StringSelection(password), null);
```

---

### üßº –û—á–∏—Å—Ç–∫–∞ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è –≤ –∫–æ–Ω—Ü–µ:

```java
Runtime.getRuntime().addShutdownHook(new Thread(() -> {
    MasterPasswordHolder holder = context.getBean(MasterPasswordHolder.class);
    holder.clear(); // –æ–±–Ω—É–ª–∏—Ç—å char[] –≤ –ø–∞–º—è—Ç–∏
}));
```

---

## üìÅ –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:

```
PasswordManager/
‚îú‚îÄ‚îÄ App.java
‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îî‚îÄ‚îÄ AppConfig.java
‚îú‚îÄ‚îÄ model/
‚îÇ   ‚îî‚îÄ‚îÄ PasswordEntry.java
‚îú‚îÄ‚îÄ service/
‚îÇ   ‚îî‚îÄ‚îÄ PasswordService.java
‚îú‚îÄ‚îÄ crypto/
‚îÇ   ‚îú‚îÄ‚îÄ EncryptionService.java
‚îÇ   ‚îî‚îÄ‚îÄ AesEncryptionService.java
‚îú‚îÄ‚îÄ security/
‚îÇ   ‚îî‚îÄ‚îÄ MasterPasswordHolder.java
‚îú‚îÄ‚îÄ repository/
‚îÇ   ‚îú‚îÄ‚îÄ PasswordRepository.java
‚îÇ   ‚îî‚îÄ‚îÄ InMemoryPasswordRepository.java
‚îú‚îÄ‚îÄ clipboard/
‚îÇ   ‚îú‚îÄ‚îÄ ClipboardService.java
‚îÇ   ‚îî‚îÄ‚îÄ SystemClipboardService.java
```

---

## üß† –ß—Ç–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è:
- –∫–æ—Ä—Ä–µ—Ç–∫–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –Ω–∞ —Å–ª–æ–∏;
- –≥—Ä–∞–º–æ—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Spring –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π;
- –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ (`char[]`, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ);
- —É–º–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –≤–≤–æ–¥–æ–º, –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞;
- (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ JavaFX –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏.

 */

@TaskDescription(taskNumber = 20, taskDescription = "Password Manager —Å Spring –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º")
public class Task20 implements Solution {
    private static final Logger logger = LoggerFactory.getLogger(Solution.class);

    @Override
    public void execute() {
        AnnotationConfigApplicationContext context =
                new AnnotationConfigApplicationContext(AppConfig.class);

        System.out.println("–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π\n");

        MasterPasswordService masterPasswordService = context.getBean(MasterPasswordService.class);
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            masterPasswordService.clearMasterPasswordFromMemory();
            logger.info("–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –æ—á–∏—â–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏ (–∏–∑ shutdownHook).");
            System.out.println("–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –æ—á–∏—â–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏.");
        }));

        PasswordService passwordService = context.getBean(PasswordService.class);

        Scanner scanner = new Scanner(System.in);
        String currentInput = "";
        while (!currentInput.equals("–≤—ã—Ö–æ–¥")) {
            List<PasswordEntry> savedPasswords = passwordService.getAll();
            System.out.println("–£ –≤–∞—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–∞—Ä–æ–ª–µ–π: " + savedPasswords.size());
            System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n–ù–∞–π—Ç–∏ –ø–∞—Ä–æ–ª–∏ –¥–ª—è —Å–∞–π—Ç–∞ (1)\n–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π (2)");

            currentInput = scanner.nextLine().trim();

            if (currentInput.equals("1")) {
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å.");
                System.out.println("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞: ");
                String site = scanner.nextLine().trim();
                List<PasswordEntry> foundedPasswords = passwordService.getPasswordsBySite(site);
                if (foundedPasswords.isEmpty()) {
                    System.out.println("–ü–∞—Ä–æ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
                } else {
                    System.out.println("–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–æ–ª–∏: ");
                    for (PasswordEntry password : foundedPasswords) {
                        System.out.println(password);
                        System.out.println("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä (1)\n–£–¥–∞–ª–∏—Ç—å (2)");
                        currentInput = scanner.nextLine().trim();
                        if (currentInput.equals("1")) {
                            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å –≤ –±—É—Ñ–µ—Ä.");
                            passwordService.copyToClipboard(password);
                        } else if (currentInput.equals("2")) {
                            System.out.println("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å? (–¥–∞/–Ω–µ—Ç)");
                            currentInput = scanner.nextLine().trim();
                            if (currentInput.equals("–¥–∞")) {
                                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –ø–∞—Ä–æ–ª—è –Ω–∞–≤—Å–µ–≥–¥–∞ :(.");
                                passwordService.deletePassword(password.getId());
                            }
                        }
                    }
                }
            } else if (currentInput.equals("2")) {
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.");
                System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞: ");
                String site = scanner.nextLine().trim();
                System.out.println("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ");
                String login = scanner.nextLine().trim();

                List<PasswordEntry> existingPasswords = passwordService.getPasswordsBySiteAndLogin(site, login);
                if (!existingPasswords.isEmpty()) {
                    System.out.println("–ü–∞—Ä–æ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ –∏ –ª–æ–≥–∏–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ? (–¥–∞/–Ω–µ—Ç)");
                    currentInput = scanner.nextLine().trim();
                    if (currentInput.equals("–Ω–µ—Ç")) {
                        continue;
                    }

                    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–æ–ª—å.");
                    System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ");
                    String notEncryptedPassword = scanner.nextLine().trim();
                    passwordService.updatePassword(existingPasswords.get(0), notEncryptedPassword);
                    System.out.println("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.");
                    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–∏–ª —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–æ–ª—å.");
                } else {
                    System.out.println("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
                    String notEncryptedPassword = scanner.nextLine().trim();
                    passwordService.savePassword(site, login, notEncryptedPassword);
                    System.out.println("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.");
                    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.");
                }
            }
        }
    }
}
